{
    "axes": {
        "base": {
            "dateFormat": null,
            "format": {
                "double": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 1,
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 2,
                    "ticks": 7
                }
            },
            "label": "Mb/s",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": "",
            "type": "numerical"
        },
        "color": {
            "byFacet": false,
            "domain": [
                "PPP pcp"
            ],
            "ignoreScale": false,
            "quantize": false,
            "quantizeProps": {
                "column": null,
                "groups": 0,
                "reverseColors": false
            },
            "range": [
                "#682590"
            ],
            "scheme": "categorical.default"
        },
        "scale": {
            "prefix": "",
            "suffix": ""
        },
        "value": {
            "format": {
                "double": {
                    "customTicks": [],
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "ticks": 7
                }
            },
            "label": "PPP pcp",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": ""
        }
    },
    "data": [
        {
            "Country": "Argentina",
            "Mb/s": 4.2,
            "PPP pcp": 20171
        },
        {
            "Country": "Bolivia",
            "Mb/s": 1.8,
            "PPP pcp": 7191
        },
        {
            "Country": "Brazil",
            "Mb/s": 3.6,
            "PPP pcp": 15211
        },
        {
            "Country": "Canada",
            "Mb/s": 11.9,
            "PPP pcp": 46240
        },
        {
            "Country": "Chile",
            "Mb/s": 5.7,
            "PPP pcp": 23969
        },
        {
            "Country": "Colombia",
            "Mb/s": 4.2,
            "PPP pcp": 14162
        },
        {
            "Country": "Costa Rica",
            "Mb/s": 3.2,
            "PPP pcp": 16142
        },
        {
            "Country": "Ecuador",
            "Mb/s": 4.1,
            "PPP pcp": 11037
        },
        {
            "Country": "Mexico",
            "Mb/s": 5.5,
            "PPP pcp": 18865
        },
        {
            "Country": "Panama",
            "Mb/s": 3.5,
            "PPP pcp": 22788
        },
        {
            "Country": "Paraguay",
            "Mb/s": 1.5,
            "PPP pcp": 9356
        },
        {
            "Country": "Peru",
            "Mb/s": 4.4,
            "PPP pcp": 13019
        },
        {
            "Country": "United States",
            "Mb/s": 12.6,
            "PPP pcp": 57294
        },
        {
            "Country": "Uruguay",
            "Mb/s": 5.9,
            "PPP pcp": 21570
        },
        {
            "Country": "Venezuela",
            "Mb/s": 1.5,
            "PPP pcp": 15103
        },
        {
            "Country": "Australia",
            "Mb/s": 7.8,
            "PPP pcp": 48806
        },
        {
            "Country": "China",
            "Mb/s": 3.7,
            "PPP pcp": 15424
        },
        {
            "Country": "Hong Kong",
            "Mb/s": 15.8,
            "PPP pcp": 58095
        },
        {
            "Country": "India",
            "Mb/s": 2.5,
            "PPP pcp": 6658
        },
        {
            "Country": "Indonesia",
            "Mb/s": 7.45,
            "PPP pcp": 11699
        },
        {
            "Country": "Japan",
            "Mb/s": 15,
            "PPP pcp": 38894
        },
        {
            "Country": "Malaysia",
            "Mb/s": 4.9,
            "PPP pcp": 27234
        },
        {
            "Country": "New Zealand",
            "Mb/s": 8.7,
            "PPP pcp": 37108
        },
        {
            "Country": "Philippines",
            "Mb/s": 2.8,
            "PPP pcp": 7696
        },
        {
            "Country": "Singapore",
            "Mb/s": 12.5,
            "PPP pcp": 87082
        },
        {
            "Country": "South Korea",
            "Mb/s": 20.5,
            "PPP pcp": 37948
        },
        {
            "Country": "Sri Lanka",
            "Mb/s": 5.1,
            "PPP pcp": 11189
        },
        {
            "Country": "Taiwan",
            "Mb/s": 10.1,
            "PPP pcp": 47790
        },
        {
            "Country": "Thailand",
            "Mb/s": 8.2,
            "PPP pcp": 16835
        },
        {
            "Country": "Vietnam",
            "Mb/s": 3.4,
            "PPP pcp": 6422
        },
        {
            "Country": "Austria",
            "Mb/s": 11.4,
            "PPP pcp": 47856
        },
        {
            "Country": "Belgium",
            "Mb/s": 12.8,
            "PPP pcp": 44881
        },
        {
            "Country": "Czech Republic",
            "Mb/s": 14.5,
            "PPP pcp": 33223
        },
        {
            "Country": "Denmark",
            "Mb/s": 14,
            "PPP pcp": 46603
        },
        {
            "Country": "Finland",
            "Mb/s": 14.8,
            "PPP pcp": 41813
        },
        {
            "Country": "France",
            "Mb/s": 8.2,
            "PPP pcp": 42384
        },
        {
            "Country": "Germany",
            "Mb/s": 11.5,
            "PPP pcp": 48190
        },
        {
            "Country": "Hungary",
            "Mb/s": 10.7,
            "PPP pcp": 27211
        },
        {
            "Country": "Ireland",
            "Mb/s": 12.4,
            "PPP pcp": 69375
        },
        {
            "Country": "Israel",
            "Mb/s": 11.2,
            "PPP pcp": 34834
        },
        {
            "Country": "Italy",
            "Mb/s": 6.5,
            "PPP pcp": 36313
        },
        {
            "Country": "Netherlands",
            "Mb/s": 15.6,
            "PPP pcp": 50846
        },
        {
            "Country": "Norway",
            "Mb/s": 16.4,
            "PPP pcp": 69296
        },
        {
            "Country": "Poland",
            "Mb/s": 10.6,
            "PPP pcp": 27715
        },
        {
            "Country": "Portugal",
            "Mb/s": 10.6,
            "PPP pcp": 28515
        },
        {
            "Country": "Romania",
            "Mb/s": 13.1,
            "PPP pcp": 22319
        },
        {
            "Country": "Russia",
            "Mb/s": 10.2,
            "PPP pcp": 26109
        },
        {
            "Country": "Slovakia",
            "Mb/s": 11.2,
            "PPP pcp": 29105
        },
        {
            "Country": "South Africa",
            "Mb/s": 3.7,
            "PPP pcp": 13179
        },
        {
            "Country": "Spain",
            "Mb/s": 10.4,
            "PPP pcp": 36451
        },
        {
            "Country": "Sweden",
            "Mb/s": 17.4,
            "PPP pcp": 49678
        },
        {
            "Country": "Switzerland",
            "Mb/s": 16.2,
            "PPP pcp": 59376
        },
        {
            "Country": "Turkey",
            "Mb/s": 6.2,
            "PPP pcp": 21147
        },
        {
            "Country": "United Arab Emirates",
            "Mb/s": 6.8,
            "PPP pcp": 67696
        },
        {
            "Country": "United Kingdom",
            "Mb/s": 13,
            "PPP pcp": 42514
        }
    ],
    "datamap": {
        "base": "Mb/s",
        "custom": {
            "label": "Country"
        },
        "facet": null,
        "ignore": [],
        "scale": null,
        "series": [
            "PPP pcp"
        ],
        "sort": [
            "Country",
            "Mb/s",
            "PPP pcp"
        ],
        "value": null
    },
    "embed": {
        "dimensions": {
            "double": {
                "height": 447,
                "width": 620
            },
            "single": {
                "height": 350,
                "width": 300
            }
        }
    },
    "margins": {
        "double": {
            "bottom": 0.07999999999999996,
            "left": 0.08,
            "right": 0.030000000000000027,
            "top": 0.07
        },
        "single": {
            "bottom": 0.10999999999999999,
            "left": 0.2,
            "right": 0.020000000000000018,
            "top": 0.12
        }
    },
    "scripts": {
        "dependencies": {
            "scripts": [
                "https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.3/d3.min.js"
            ],
            "styles": []
        },
        "draw": "function draw(){\n\n    var initialProps = {\n        dims: {\n          single: { width: 300, height: 225 },\n          double: { width: 620, height: 350}\n        },\n    };\n    \n    // Returns object with properties and methods representing\n    // dimensions, scales, axes, etc.\n    var werk = werkHelper.build(initialProps);\n    \n    \n    var line = d3.line()\n        .defined(function(d){ return !isNaN(d.y);})\n        .x(function(d) { return werk.scales.x(d.x); })\n        .y(function(d) { return werk.scales.y(d.y); });\n    \n    var svg = d3.select(\"#chart\")\n        .append(\"svg\")\n        .style(\"background-color\",\"transparent\")\n        .attr(\"width\", werk.dims.svg.width + werk.dims.margins.left + werk.dims.margins.right)\n        .attr(\"height\", werk.dims.svg.height + werk.dims.margins.top + werk.dims.margins.bottom)\n      .append(\"g\")\n        .attr(\"transform\", \"translate(\" + werk.dims.margins.left + \",\" + werk.dims.margins.top + \")\");\n\n    chartwerk.axes.base.shadedRegions.forEach(function(shade) {\n        var rectLeft = werk.scales.x(werk.parsers.base(shade.min));\n        var rectRight = werk.scales.x(werk.parsers.base(shade.max));\n        var minWidth = 2;\n        var width = Math.max(2, rectRight - rectLeft);\n        if (rectRight === rectLeft) {\n            svg.append('line')\n                .attr(\"class\",'solid-line')\n                .attr(\"y1\", 0)\n                .attr(\"y2\", werk.scales.y.range()[0])\n                .attr(\"x1\", rectLeft)\n                .attr(\"x2\", rectLeft);\n        } else {\n            svg.append('rect')\n                .attr(\"class\",\"shaded-area\")\n                .attr('y', 0)\n                .attr('x', rectLeft)\n                .attr('width', width)\n                .attr('height', werk.scales.y.range()[0]); \n        }\n    });\n    \n    chartwerk.axes.value.shadedRegions.forEach(function(shade) {\n        var rectMin = werk.scales.y(werk.parsers.value(shade.min));\n        var rectMax = werk.scales.y(werk.parsers.value(shade.max));\n        var height = Math.max(2, rectMin - rectMax);\n        if (rectMin === rectMax) {\n            svg.append('line')\n                .attr(\"class\",'dotted-line')\n                .attr(\"x1\", 0)\n                .attr(\"x2\", werk.scales.x.range()[1])\n                .attr(\"y1\", rectMin)\n                .attr(\"y2\", rectMin);\n        } else {\n            svg.append('rect')\n                .attr(\"class\",\"shaded-area\")\n                .attr('x', 0)\n                .attr('y', rectMax)\n                .attr('width', werk.scales.x.range()[1])\n                .attr('height', height); \n        }\n    });\n    \n\n    svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(werk.axes.y)\n      .append(\"text\")\n        .attr(\"class\",\"label\")\n        .attr(\"y\", -werk.dims.margins.top + 15)\n        .attr(\"x\", -werk.dims.margins.left)\n        .style(\"text-anchor\", \"start\")\n        .text(chartwerk.axes.value.label);\n    \n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + werk.dims.svg.height + \")\")\n        .call(werk.axes.x)\n    .append(\"text\")\n        .attr(\"class\",\"label\")\n        .attr(\"y\", -5 )\n        .attr(\"x\", werk.dims[chartwerk.ui.size].width - werk.dims.margins.right - werk.dims.margins.left)\n        .style(\"text-anchor\", \"end\")\n        .text(chartwerk.axes.base.label);\n    \t\t\n    svg.selectAll(\".dot\")\n      .data(werk.data[0].values)\n    .enter().append(\"circle\")\n      .attr(\"class\", \"dot\")\n      .attr(\"r\", 3.5)\n      .attr(\"cx\", function(d) { return werk.scales.x(d.x); })\n      .attr(\"cy\", function(d) { return werk.scales.y(d.y); })\n      .style(\"fill\", function(d){ return werk.scales.color(d.name);});\n    \n    //A rect to catch mouse movements\n    var pointerRect = svg.append(\"rect\")\n    \t.attr(\"height\", werk.dims.svg.height)\n    \t.attr(\"width\", werk.dims.svg.width)\n    \t.style(\"fill\",\"none\")\n    \t.style(\"pointer-events\", \"fill\")\n        .on(\"mouseout\",  hideTooltip)\n        .on(\"mousemove\", showTooltip);\n    \n    \n    \n    var tooltip = d3.select(\"#chart\")\n      .append(\"div\")\n        .attr(\"class\",\"tooltip\")\n        .style(\"position\",\"absolute\");\n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"value-label\");\n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"value-base\");\n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"value-value\");\n    \n    var trackCirc = svg.append(\"circle\")\n\t\t.attr(\"cx\",0)\n\t\t.attr(\"cy\",0)\n\t\t.attr(\"r\",4)\n\t\t.style(\"fill\",\"none\")\n\t\t.style(\"stroke-width\",2)\n\t\t.style(\"display\",\"none\")\n        .style(\"pointer-events\", \"none\");\n      \n    function hideTooltip(){\n        d3.select(\".tooltip\")\n          .style(\"opacity\", 0);\n        trackCirc\n          .style(\"display\", \"none\");\n    }\n    \n    function showTooltip(){\n        var x0 = d3.mouse(this)[0],\n    \t\ty0 = d3.mouse(this)[1],\n    \n    \t\t//Start dist at a max number so we can check all distances less than\n    \t\tdist = werk.scales.x(werk.dataDims.xMax) - werk.scales.x(werk.dataDims.xMin) + werk.scales.y(werk.dataDims.yMax) - werk.scales.y(werk.dataDims.yMin),\n    \t\tnearestX = 0,\n    \t\tnearestY = 0,\n    \t\tcolorGroup = \"\",\n    \t\tcomma = d3.format(\",\");\n    \n    \twerk.data.forEach(function(series){\n    \t\tseries.values.forEach(function(d){\n    \t\t\tif(Math.abs(x0 - werk.scales.x(d.x)) + Math.abs(y0 - werk.scales.y(d.y))  < dist){\n    \t\t\t\tnearestX = d.x\n    \t\t\t\tnearestY = d.y\n    \t\t\t\tlabel = d.label\n    \t\t\t\tcolorGroup = series.name\n    \t\t\t\tdist = Math.abs(x0 - werk.scales.x(d.x)) + Math.abs(y0 - werk.scales.y(d.y))\n    \t\t\t}\n    \t\t})\n    \n    \t});\n\n\n\t    trackCirc\n\t\t\t.attr(\"cx\", werk.scales.x(nearestX))\n\t\t\t.attr(\"cy\", werk.scales.y(nearestY))\n\t\t\t.style(\"stroke\",\"#333\")\n\t\t\t.style(\"display\",\"\");\n\t\t\t\n\t\td3.select(\".tooltip .value-label\")\n          .style(\"color\", werk.scales.color(colorGroup))\n          .text(function(){\n              return label;\n          });\n          \n\t\td3.select(\".tooltip .value-base\")\n          .style(\"color\", werk.scales.color(colorGroup))\n          .text(function(){\n              var b = chartwerk.axes.base;\n              return b.label + ': ' + b.prefix + comma(nearestX) + b.suffix;\n          });\n          \n        d3.select(\".tooltip .value-value\")\n          .style(\"color\", werk.scales.color(colorGroup))\n          .text(function(){\n              var v = chartwerk.axes.value;\n              return v.label + ': ' + v.prefix + comma(nearestY) + v.suffix;\n          });\n          \n        var p = d3.mouse(this.parentElement.parentElement);\n        \n        d3.select(\".tooltip\")\n            .style(\"opacity\", 1)\n            .style(\"top\", function(){\n                var s = chartwerk.ui.size,\n                    h = werk.dims[s].height,\n                    tipH = parseInt(d3.select(\".tooltip\").style(\"height\"), 10),\n                    pos = p[1] > (h / 2) ?\n                        p[1] - (tipH + 5) : p[1] + 15;\n                return pos.toString() + \"px\";\n            })\n            .style(\"left\", function(){\n                // We position either left or right of the mouse point based\n                // on whether we're past the midpoint of the chart. This protects\n                // against tooltips overflowing embedded iframes.\n                var s = chartwerk.ui.size,\n                    w = werk.dims[s].width,\n                    tipW = parseInt(d3.select(\".tooltip\").style(\"width\"), 10),\n                    pos = p[0] > (w / 2) ?\n                        p[0] - (tipW + 10) : p[0] + 10;\n                return pos.toString() + \"px\";\n            });\n    }\n}",
        "helper": "var werkHelper = {\n    parse: function(werk){\n        werk.parsers = {\n          base: function(d){ return d === '' ? NaN : +d; },\n          value: function(d){ return d === '' ? NaN : +d; },\n          label: function(d){ return d; }\n        };\n        \n        werk.data = chartwerk.axes.color.domain.map(function(category){\n            return {\n                name: category,\n                values: chartwerk.data.map(function(d){\n                    return {\n                        x: werk.parsers.base(d[chartwerk.datamap.base]),\n                        y: werk.parsers.value(d[category]),\n                        label: werk.parsers.label(d[chartwerk.datamap.custom.label])\n                    };\n                })\n                .sort(function(a, b){ return d3.ascending(a.x, b.x); })\n            };\n        });\n        \n        // Get max and min of data \n        var xMax = d3.max(werk.data,function(series){return d3.max(series.values,function(d){return d.x; }); }),\n\t        xMin = d3.min(werk.data,function(series){return d3.min(series.values,function(d){return d.x; }); }),\n\t        yMax = d3.max(werk.data,function(series){return d3.max(series.values,function(d){return d.y; }); }),\n\t        yMin = d3.min(werk.data,function(series){return d3.min(series.values,function(d){return d.y; }); });\n        \n        werk.dataDims = {\n            xMin: xMin,\n            xMax: xMax,\n            yMin: yMin,\n            yMax: yMax\n        };\n    },\n    \n    dims: function(werk){\n        var s = chartwerk.ui.size;\n            w = werk.dims[s].width,\n            h = werk.dims[s].height,\n            margins = {\n                right: chartwerk.margins[s].right * w,\n                left: chartwerk.margins[s].left * w,\n                top: chartwerk.margins[s].top * h,\n                bottom: chartwerk.margins[s].bottom * h\n            },\n            svg = {\n                width: w - margins.left - margins.right,\n                height: h - margins.top - margins.bottom\n            };\n        \n        werk.dims.margins = margins;\n        werk.dims.svg = svg;\n    },\n\n    scales: function(werk){\n        var svg = werk.dims.svg;\n        werk.scales = {\n            x: d3.scaleLinear()\n                .range([0, svg.width]),\n            y: d3.scaleLinear()\n                .range([svg.height, 0]),\n            color: chartwerk.axes.color.range.length > 1 ? \n                d3.scaleOrdinal()\n                  .domain(chartwerk.axes.color.domain)\n                  .range(chartwerk.axes.color.range) \n            :   function(d){return chartwerk.axes.color.range[0];},\n        };\n    },\n    \n    baseDomain:  function(werk){\n        var xMax = d3.max(werk.data, function(category) {\n                return d3.max(category.values, function(d){\n                    return d.x; \n                }); \n            }),\n            xMin = d3.min(werk.data, function(category) { \n                return d3.min(category.values, function(d){ \n                    return d.x;\n                });\n            });\n        werk.scales.x.domain([xMin, xMax]);\n    },\n\n    valueDomain: function(werk){\n        var yMax = d3.max(werk.data, function(category) { \n                return d3.max(category.values, function(d){ \n                    return d.y; \n                }); \n            }),\n            yMin = d3.min(werk.data, function(category) {\n                return d3.min(category.values, function(d){ \n                    return d.y; \n                }); \n            });\n        \n        if (chartwerk.axes.value.min && chartwerk.axes.value.max) {\n            werk.scales.y.domain(\n                [chartwerk.axes.value.min, chartwerk.axes.value.max]\n            );\n        } else if (chartwerk.axes.value.min) {\n            werk.scales.y.domain(\n                [chartwerk.axes.value.min, yMax ]\n            );\n        } else if (chartwerk.axes.value.max) {\n            werk.scales.y.domain(\n                [yMin, chartwerk.axes.value.max]\n            );\n        } else {\n            werk.scales.y.domain([yMin, yMax]);\n        }\n        \n        werk.scales.y.nice();\n    },\n\n    axes: function(werk){\n        werk.axes = {\n          x: d3.axisBottom(werk.scales.x)\n              .tickSizeInner(6)\n              .tickSizeOuter(0)\n              .tickPadding(3)\n              .tickFormat( function(d){ \n                var formatter = werk.scales.x.tickFormat();\n                if (d >= 0) {\n                  return formatter(d) === '0' ? '0' : \n                  chartwerk.axes.value.prefix + formatter(d) + chartwerk.axes.value.suffix;\n                } else {\n                  return \"-\" + chartwerk.axes.value.prefix + formatter(Math.abs(d)) + chartwerk.axes.value.suffix;\n                }\n              }),\n          y: d3.axisLeft(werk.scales.y)\n              .tickSizeInner(-werk.dims.svg.width)\n              .tickSizeOuter(0)\n              .tickPadding(7)\n              .tickFormat( function(d){ \n                var formatter = werk.scales.y.tickFormat();\n                if (d >= 0) {\n                  return formatter(d) === '0' ? '0' : \n                  chartwerk.axes.value.prefix + formatter(d) + chartwerk.axes.value.suffix;\n                } else {\n                  return \"-\" + chartwerk.axes.value.prefix + formatter(Math.abs(d)) + chartwerk.axes.value.suffix;\n                }\n              }),\n        };\n    },\n\n    baseTicks: function(werk){\n        if (chartwerk.axes.base.type !== 'date') {\n            return;\n        }\n        \n        // Abstract this to a separate file once formats settled.\n        var customLocale = {\n          \"dateTime\": \"%x, %X\",\n          \"date\": \"%-m/%-d/%Y\",\n          \"time\": \"%-I:%M:%S %p\",\n          \"periods\": [\"AM\", \"PM\"],\n          \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n          \"shortDays\": [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n          \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n          \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n        }\n        \n        d3.timeFormatDefaultLocale(customLocale);\n        \n        \n        var formatMillisecond = d3.timeFormat(\".%L\"),\n            formatSecond = d3.timeFormat(\":%S\"),\n            formatMinute = d3.timeFormat(\"%I:%M\"),\n            formatHour = d3.timeFormat(\"%I %p\"),\n            formatDay = d3.timeFormat(\"%a %d\"),\n            formatWeek = d3.timeFormat(\"%b %d\"),\n            formatMonth = d3.timeFormat(\"%B\"),\n            formatYear = d3.timeFormat(\"%Y\");\n        \n        \n        var s = chartwerk.ui.size;\n        var dateTick;\n        switch(chartwerk.axes.base.format[s].dateString) {\n            case 'Y':\n                dateTick = d3.timeYear;\n                formatYear = d3.timeFormat(\"%Y\");\n                break;\n            case 'y':\n                dateTick = d3.timeYear;\n                formatYear = d3.timeFormat(\"'%y\");\n                break;\n            case 'M':\n                dateTick = d3.timeMonth;\n                formatMonth = d3.timeFormat(\"%B\");\n                formatYear = d3.timeFormat(\"Jan. '%y\");\n                break;\n            case 'm':\n                dateTick = d3.timeMonth;\n                formatMonth = d3.timeFormat(\"%b.\");\n                formatYear = d3.timeFormat(\"J/%y\");\n                break;\n            case 'W':\n            case 'w':\n                dateTick = d3.timeWeek;\n                formatMonth = d3.timeFormat(\"%b.\");\n                formatYear = d3.timeFormat(\"J/%y\");\n                break;\n            case 'D':\n                dateTick = d3.timeDay;\n                formatMonth = d3.timeFormat(\"%b.\");\n                formatYear = d3.timeFormat(\"J/%y\");\n        }\n        \n        function multiFormat(date) {\n          return (d3.timeSecond(date) < date ? formatMillisecond\n              : d3.timeMinute(date) < date ? formatSecond\n              : d3.timeHour(date) < date ? formatMinute\n              : d3.timeDay(date) < date ? formatHour\n              : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek)\n              : d3.timeYear(date) < date ? formatMonth\n              : formatYear)(date);\n        }\n        \n        werk.axes.x.tickFormat(multiFormat)\n        \n        werk.axes.x.ticks(\n            dateTick.every( chartwerk.axes.base.format[s].frequency )\n        );\n    },\n\n    valueTicks: function(werk){\n        var s = chartwerk.ui.size;\n        if (chartwerk.axes.value.format[s].customTicks.length > 0) { \n            werk.axes.y.tickValues(\n                chartwerk.axes.value.format[s].customTicks\n            );\n        } else {\n            werk.axes.y.ticks(\n              chartwerk.axes.value.format[s].ticks\n            );\n        }\n    },\n\n    // Build dims, scales and axes.\n    build: function(werk){\n        this.parse(werk);\n        this.dims(werk);\n        this.scales(werk);\n        this.baseDomain(werk);\n        this.valueDomain(werk);\n        this.axes(werk);\n        this.baseTicks(werk);\n        this.valueTicks(werk);\n        return werk;\n    },\n};",
        "html": "<div id='chart-header'>\n\t<h2 id='headline'></h2>\n\t<div id='chatter'></div> \n</div> \n<div id='chart-ui'>\n\t<!--You can put any necessary buttons, etc., here.-->\n</div>\n<div id='chart-legend'></div>\n<div id='chart'></div> \n<div id='chart-footer'> \n\t<div id='footnote'></div> \n\t<div id='source'></div> \n\t<div id='author'></div> \n</div>",
        "styles": "#chartwerk {\n    font-family:'Theinhardt-Regular', sans-serif; \n    width:620px;\n}\n#chartwerk.single{\n    width:300px;\n    max-width: 100%;\n    overflow:hidden;\n    margin:0;\n}\n#chartwerk #headline {\n    font-family:'Theinhardt-Medium', sans-serif;\n    font-weight:normal;\n    font-size:24px;\n    line-height:1.2;\n}\n#chartwerk #chatter {\n    margin:5px 0 10px;\n}\n#chartwerk #footnote,\n#chartwerk #source,\n#chartwerk #author {\n    font-size:11px;\n    color:grey;\n\n}\n#chartwerk #author {\n    text-align:right;\n}\n#chartwerk #chart{\n    background-color:white;\n}\n#chartwerk #chart-legend \n.chart-legend-container .key-label{\n    font:11px 'Theinhardt-Regular', sans-serif;\n}\n#chartwerk #chart-legend \n.chart-legend-container .key-color{\n    margin-right:2px;\n}\n#chartwerk #chart-legend \n.chart-legend-container .key{\n    margin-right:8px;\n}\n#chartwerk .annotation p{\n    font-family:'Theinhardt-Regular', sans-serif;\n}\n#chartwerk #chart .tooltip{\n    font: 13px 'Theinhardt-Regular', sans-serif;\n    opacity:0;\n    pointer-events:none;\n    background:rgba(255,255,255,.75);\n    padding:5px;\n    width:auto;\n}\n#chartwerk #chart .tooltip .value-label{\n    font-family: 'Theinhardt-Medium', sans-serif;\n    font-weight: normal;\n}\n\n#chartwerk #chart path.line{\n    fill: none;\n    stroke-width: 2px;\n}\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: rgb(180,180,180);\n  shape-rendering: crispEdges;\n}\n.axis text{\n    font-family: 'Theinhardt-Regular', sans-serif;\n    fill: rgb(132,132,132);\n    font-size:11px;\n}\n.y.axis line{\n    stroke-dasharray: 3px 3px;\n}\n.y.axis path{\n    display:none;\n}\n.y.axis .label, .x.axis .label {\n    font-family: 'Theinhardt-Regular', sans-serif;\n    font-weight:normal;\n}\nline.dotted-line{\n    stroke:rgb(33,33,33);\n    stroke-width:1px;\n    stroke-dasharray: 7px 5px;\n}\nline.solid-line{\n    stroke:rgb(33,33,33);\n    stroke-width:1px;\n}\nrect.shaded-area{\n    fill:#ddd;\n}"
    },
    "template": {
        "description": "",
        "icon": null,
        "tags": [],
        "title": "Scatter chart"
    },
    "text": {
        "annotations": [],
        "author": "Josh Romero / IEEE Spectrum",
        "chatter": "See how countries compare",
        "footnote": "",
        "headline": "Internet Speeds vs. Purchasing Power",
        "legend": {
            "active": false,
            "double": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 500
            },
            "keys": [
                {
                    "color": "#329CEB",
                    "text": ""
                },
                {
                    "color": "#329CEB",
                    "text": ""
                }
            ],
            "single": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 250
            },
            "title": ""
        },
        "source": "Source: [World Bank](https://data.worldbank.org/)",
        "title": "Internet vs PPP"
    },
    "ui": {
        "datamap": [
            {
                "alias": "X axis",
                "available": true,
                "class": "base"
            },
            {
                "alias": "value axis",
                "available": true,
                "class": "value"
            },
            {
                "alias": "scale axis",
                "available": false,
                "class": "scale"
            },
            {
                "alias": "Y axis",
                "available": true,
                "class": "series"
            },
            {
                "alias": "faceting column",
                "available": true,
                "class": "facet"
            },
            {
                "alias": "ignored column",
                "available": true,
                "class": "ignore"
            },
            {
                "alias": "label",
                "available": true,
                "class": "label"
            }
        ],
        "rawData": "Country\tMb/s\tPPP pcp\nArgentina\t4.2\t20171\nBolivia\t1.8\t7191\nBrazil\t3.6\t15211\nCanada\t11.9\t46240\nChile\t5.7\t23969\nColombia\t4.2\t14162\nCosta Rica\t3.2\t16142\nEcuador\t4.1\t11037\nMexico\t5.5\t18865\nPanama\t3.5\t22788\nParaguay\t1.5\t9356\nPeru\t4.4\t13019\nUnited States\t12.6\t57294\nUruguay\t5.9\t21570\nVenezuela\t1.5\t15103\nAustralia\t7.8\t48806\nChina\t3.7\t15424\nHong Kong\t15.8\t58095\nIndia\t2.5\t6658\nIndonesia\t7.45\t11699\nJapan\t15\t38894\nMalaysia\t4.9\t27234\nNew Zealand\t8.7\t37108\nPhilippines\t2.8\t7696\nSingapore\t12.5\t87082\nSouth Korea\t20.5\t37948\nSri Lanka\t5.1\t11189\nTaiwan\t10.1\t47790\nThailand\t8.2\t16835\nVietnam\t3.4\t6422\nAustria\t11.4\t47856\nBelgium\t12.8\t44881\nCzech Republic\t14.5\t33223\nDenmark\t14\t46603\nFinland\t14.8\t41813\nFrance\t8.2\t42384\nGermany\t11.5\t48190\nHungary\t10.7\t27211\nIreland\t12.4\t69375\nIsrael\t11.2\t34834\nItaly\t6.5\t36313\nNetherlands\t15.6\t50846\nNorway\t16.4\t69296\nPoland\t10.6\t27715\nPortugal\t10.6\t28515\nRomania\t13.1\t22319\nRussia\t10.2\t26109\nSlovakia\t11.2\t29105\nSouth Africa\t3.7\t13179\nSpain\t10.4\t36451\nSweden\t17.4\t49678\nSwitzerland\t16.2\t59376\nTurkey\t6.2\t21147\nUnited Arab Emirates\t6.8\t67696\nUnited Kingdom\t13\t42514",
        "size": "single"
    }
}