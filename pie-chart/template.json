{
    "axes": {
        "base": {
            "dateFormat": null,
            "format": {
                "double": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 1,
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 2,
                    "ticks": 7
                }
            },
            "label": "",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": "",
            "type": "categorical"
        },
        "color": {
            "byFacet": false,
            "domain": [
                "Criminal Records",
                "Noncriminal Records",
                "Unknown"
            ],
            "ignoreScale": false,
            "quantize": false,
            "quantizeProps": {
                "column": null,
                "groups": 0,
                "reverseColors": false
            },
            "range": [
                "#D40A06",
                "#48B44C",
                "#C9C9C9"
            ],
            "scheme": "categorical.default"
        },
        "scale": {
            "prefix": "",
            "suffix": ""
        },
        "value": {
            "format": {
                "double": {
                    "customTicks": [],
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "ticks": 7
                }
            },
            "label": "Dollars",
            "max": null,
            "min": null,
            "prefix": "$",
            "shadedRegions": [],
            "suffix": ""
        }
    },
    "data": [
        {
            "Number": 8,
            "Type": "Criminal Records"
        },
        {
            "Number": 12,
            "Type": "Unknown"
        },
        {
            "Number": 80,
            "Type": "Noncriminal Records"
        }
    ],
    "datamap": {
        "base": null,
        "custom": {},
        "facet": null,
        "ignore": [],
        "scale": "Type",
        "series": [],
        "sort": [
            "Type",
            "Number"
        ],
        "value": "Number"
    },
    "embed": {
        "dimensions": {
            "double": {
                "height": 374,
                "width": 620
            },
            "single": {
                "height": 396,
                "width": 300
            }
        }
    },
    "margins": {
        "double": {
            "bottom": 0.030000000000000027,
            "left": 0.03,
            "right": 0.030000000000000027,
            "top": 0.03
        },
        "single": {
            "bottom": 0.030000000000000027,
            "left": 0.25,
            "right": 0.030000000000000027,
            "top": 0.17
        }
    },
    "scripts": {
        "dependencies": {
            "scripts": [
                "https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.3/d3.min.js"
            ],
            "styles": []
        },
        "draw": "function draw(){\n    \n    var initialProps = {\n        dims: {\n          single: { width: 300, height: 225 },\n          double: { width: 620, height: 250}\n        },\n    };\n    \n    // Returns object with properties and methods representing\n    // dimensions, scales, axes, etc.\n    var werk = werkHelper.build(initialProps);\n\n    var svg = d3.select('#chart')\n        .append('svg')\n        .attr('width', werk.dims.svg.width + werk.dims.margins.left + werk.dims.margins.right)\n        .attr('height', werk.dims.svg.height + werk.dims.margins.top + werk.dims.margins.bottom)\n      .append('g')\n        .attr(\n            'transform', 'translate(' + werk.dims.margins.left + ',' + werk.dims.margins.top +')')\n      .append('g')\n        .attr('transform', 'translate(' + (werk.dims.svg.width / 2) + ',' + (werk.dims.svg.height / 2) + ')');\n      \n    var radius = Math.min(werk.dims.svg.width, werk.dims.svg.height) / 2;\n    \n    var arc = d3.arc()\n        .innerRadius(0)\n        .outerRadius(radius);\n        \n    var pie = d3.pie()\n        .value(function(d) { return d[chartwerk.datamap.value]; })\n        .sort(null);\n    \n    var facets = svg.selectAll('.facet')\n      .data(pie(chartwerk.data))\n      .enter().append('path')\n      .attr('d', arc)\n      .attr('class', 'facet')\n      .attr('fill', function(d) {\n          return werk.scales.color(d.data[chartwerk.datamap.scale]);\n      });\n\n  facets\n    .on('mouseover', function(d) {\n      d3.select(this)\n        .classed('highlight', true)\n        .attr('d',arc.outerRadius(radius + 5));\n      d3.select('.tooltip .title').text(d.data[chartwerk.datamap.scale]);\n      d3.select('.tooltip .value').text(d.data[chartwerk.datamap.value] + '%');\n      \n      tooltip.style('opacity', 1);\n    })\n    .on('mouseout', function(d) {\n      d3.select(this)\n        .classed('highlight', false)\n        .attr('d',arc.outerRadius(radius));\n      \n      tooltip.style('opacity', 0);\n    })\n    .on('mousemove', function(d) {\n            var p = d3.mouse(this.parentElement.parentElement.parentElement);\n      tooltip\n        .style(\"left\", function(){\n            // We position either left or right of the mouse point based\n            // on whether we're past the midpoint of the chart. This protects\n            // against tooltips overflowing embedded iframes.\n            var s = chartwerk.ui.size,\n                w = werk.dims[s].width,\n                tipW = parseInt(d3.select(\".tooltip\").style(\"width\"), 10),\n                pos = p[0] > (w / 2) ?\n                    p[0] - (tipW + 10) : p[0] + 15;\n            return pos.toString() + \"px\";\n        })\n        .style(\"top\", function(){\n            var s = chartwerk.ui.size,\n                h = werk.dims[s].height,\n                tipH = parseInt(d3.select(\".tooltip\").style(\"height\"), 10),\n                pos = p[1] > (h / 2) ?\n                    p[1] - (tipH + 5) : p[1] + 20;\n            return pos.toString() + \"px\";\n        });\n    });\n\n    var tooltip = d3.select(\"#chart\")\n      .append(\"div\")\n        .attr(\"class\",\"tooltip\")\n        .style(\"position\",\"absolute\");\n        \n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"title\")\n      .text(chartwerk.datamap.scale);\n      \n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"value\");\n}",
        "helper": "var werkHelper = {\n    dims: function(werk){\n        var s = chartwerk.ui.size;\n            w = werk.dims[s].width,\n            h = werk.dims[s].height,\n            margins = {\n                right: chartwerk.margins[s].right * w,\n                left: chartwerk.margins[s].left * w,\n                top: chartwerk.margins[s].top * h,\n                bottom: chartwerk.margins[s].bottom * h\n            },\n            svg = {\n                width: w - margins.left - margins.right,\n                height: h + 2 - margins.top - margins.bottom\n            };\n        \n        werk.dims.margins = margins;\n        werk.dims.svg = svg;\n    },\n    \n    scales: function(werk){\n        var svg = werk.dims.svg;\n        werk.scales = {\n            color: chartwerk.axes.color.quantize ? \n                d3.scaleQuantize() : d3.scaleOrdinal(),\n        };\n        \n        werk.scales.color\n            .domain(chartwerk.axes.color.domain)\n            .range(chartwerk.axes.color.range);\n    },\n\n    // Build dims, scales and axes.\n    build: function(werk){\n        this.dims(werk);\n        this.scales(werk);\n        return werk;\n    },\n};",
        "html": "<div id='chart-header'>\n\t<h2 id='headline'></h2>\n\t<div id='chatter'></div> \n</div> \n<div id='chart-ui'>\n\t<!--You can put any necessary buttons, etc., here.-->\n</div>\n<div id='chart-legend'></div>\n<div id='chart'></div> \n<div id='chart-footer'> \n\t<div id='footnote'></div> \n\t<div id='source'></div> \n\t<div id='author'></div> \n</div>",
        "styles": "\n#chartwerk {\n    font-family:'Theinhardt-Regular',sans-serif; \n    width:620px;\n}\n#chartwerk.single{\n    width:300px;\n    max-width:100%;\n    overflow:hidden;\n    margin:0;\n}\n#chartwerk #headline {\n    font-family:'Theinhardt-Medium',sans-serif; ;\n    font-weight:normal;\n    font-size:24px;\n    line-height: 1.2;\n}\n#chartwerk #chatter {\n    font-size:14px;\n    line-height:19px;\n    margin:5px 0 10px;\n}\n#chartwerk #footnote,\n#chartwerk #source,\n#chartwerk #author {\n    font-size:11px;\n    color:grey;\n\n}\n#chartwerk #author {\n    text-align:right;\n}\n#chartwerk #chart{\n    background-color:white;\n    margin:3px;\n}\n#chartwerk #chart-legend, #chartwerk .chart-legend-container {\n    font-family:'Theinhardt-Regular',sans-serif;\n    font-size:14px;\n    line-height:19px;\n}\n#chartwerk .chart-legend-container .title {\n    margin-bottom:5px;\n}\n#chartwerk .chart-legend-container .key-label{\n    font:11px 'Theinhardt-Regular',sans-serif;\n}\n#chartwerk .chart-legend-container .key-color{\n    margin-right:2px;\n}\n#chartwerk .chart-legend-container .key{\n    margin-right:8px;\n}\n#chartwerk .annotation p{\n    font-family:'Theinhardt-Regular',sans-serif; \n}\n#chartwerk #chart .tooltip{\n    font: 13px 'Theinhardt-Regular',sans-serif; \n    opacity:0;\n    pointer-events:none;\n    background:rgba(255,255,255,.75);\n    padding:5px;\n    width:auto;\n}\n#chartwerk #chart .tooltip .title{\n    font-family: 'Theinhardt-Medium',sans-serif;\n    font-weight: normal;\n    fill:grey;\n}\n.facet.highlight {\n    // stroke: #000;\n}"
    },
    "template": {
        "description": "Use a pie chart to show the relationship of a part to a whole, with percentages. Works best with fewer slices (ideally just one).\n\nFor comparing the size of multiple parts, or raw amounts, consider a unit chart instead.",
        "icon": null,
        "tags": [],
        "title": " Pie chart"
    },
    "text": {
        "annotations": [],
        "author": "Josh Romero / IEEE Spectrum",
        "chatter": "The FBI\u2019s FACES face recognition database mostly contains images of law-abiding citizens taken from driver\u2019s license and passport photos.",
        "footnote": null,
        "headline": "Where the FBI Gets Its Photos",
        "legend": {
            "active": true,
            "double": {
                "align": "l",
                "background": false,
                "inside": true,
                "position": {
                    "x": 0,
                    "y": 0
                },
                "width": 150
            },
            "keys": [
                {
                    "color": "#D40A06",
                    "text": "criminal records"
                },
                {
                    "color": "#48B44C",
                    "text": "noncriminal records"
                },
                {
                    "color": "#C9C9C9",
                    "text": "unknown"
                }
            ],
            "single": {
                "align": "l",
                "background": false,
                "inside": true,
                "position": {
                    "x": 0,
                    "y": 0
                },
                "width": 198
            },
            "title": "% of images obtained from:"
        },
        "source": "Source: Center on Privacy and Technology, Georgetown Law",
        "title": "fbi-faces-pie"
    },
    "ui": {
        "datamap": [
            {
                "alias": "base axis",
                "available": false,
                "class": "base"
            },
            {
                "alias": "Value",
                "available": true,
                "class": "value"
            },
            {
                "alias": "Color group",
                "available": true,
                "class": "scale"
            },
            {
                "alias": "data series",
                "available": false,
                "class": "series"
            },
            {
                "alias": "faceting column",
                "available": false,
                "class": "facet"
            },
            {
                "alias": "ignored column",
                "available": false,
                "class": "ignore"
            }
        ],
        "rawData": "Type,Number\nCriminal Records,8\nUnknown,12\nNoncriminal Records,80\n\n",
        "size": "single"
    }
}